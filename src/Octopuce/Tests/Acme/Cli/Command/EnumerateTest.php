<?php
namespace Octopuce\Tests\Acme\Cli\Command;
use Octopuce\Acme\Cli\Command\Enumerate;
use Octopuce\Acme\Client;
use Symfony\Component\Console\Tester\CommandTester;


/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.1 on 2015-12-29 at 00:43:05.
 */
class EnumerateTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var Enumerate
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->client = $this->getMockBuilder("Octopuce\Acme\Client")->getMock();
        $this->object = new Enumerate(null,$this->client);
                
    }

    /**
     * @dataProvider NonceProvider
     */
    function testNonce( $nonceValue, $expectedCode, $testMessage ){
        
        $response = new \Guzzle\Http\Message\Response("200", array(
            "Replay-Nonce" => $nonceValue
        ));
        $this->client->expects($this->any())
             ->method('enumerate')
             ->will($this->returnValue($response));
        $tester = new CommandTester( $this->object );
        $code = $tester->execute(array());
        // success command
        $this->assertEquals($expectedCode,$code,"Should return code $expectedCode ${testMessage}");
        
        // If success expected
        if( 0 == $expectedCode ){
            // Get output
            $out = $tester->getDisplay();
            // is a string
            $this->assertInternalType("string",$out,"Should return a string ${testMessage}");
            // contains nonce hash
            $this->assertThat($out,$this->stringContains($nonceValue),"Should return string containing nonce ${testMessage}");
            
        }
        
    }
    
    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }
    
    function nonceProvider(){
        return array(
            array("someOddHash", 0, "when returning a valid hash"),
            array("",1, "when returning empty value"),
        );
    }
    
}
